
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000001a6  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000072  00000000  00000000  000009c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000019e  00000000  00000000  00000a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000100  00000000  00000000  00000bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000211  00000000  00000000  00000cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f1  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000030  00000000  00000000  00001045  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include <avr/io.h>
#include "uart.h"  //uart library file

int main(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;
  uart_initialize();                           //initialize uart module
  8c:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_initialize>
  write_uart_strg("Enter the character\n\r");
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 b3 00 	call	0x166	; 0x166 <write_uart_strg>
    while (1) 
    {
	data=read_uart();                        //receive data
  98:	0e 94 9d 00 	call	0x13a	; 0x13a <read_uart>
  9c:	89 83       	std	Y+1, r24	; 0x01
	write_uart(data);                        //transmit the received data
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	0e 94 78 00 	call	0xf0	; 0xf0 <write_uart>
    }
  a4:	f9 cf       	rjmp	.-14     	; 0x98 <main+0x16>

000000a6 <uart_initialize>:
#include <avr/io.h>
/*initializes the UART module*/
void uart_initialize()
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	00 d0       	rcall	.+0      	; 0xac <uart_initialize+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	unsigned int baudrate_value=103;
  b0:	87 e6       	ldi	r24, 0x67	; 103
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	9a 83       	std	Y+2, r25	; 0x02
  b6:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=baudrate_value;                             //Loading the baud rate generator registers
  b8:	89 e2       	ldi	r24, 0x29	; 41
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	29 81       	ldd	r18, Y+1	; 0x01
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	UBRRH=(baudrate_value>>8);
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	29 81       	ldd	r18, Y+1	; 0x01
  c8:	3a 81       	ldd	r19, Y+2	; 0x02
  ca:	23 2f       	mov	r18, r19
  cc:	33 27       	eor	r19, r19
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18

	UCSRB=(1<<TXEN)|(1<<RXEN);                       //Enabling transmission and reception
  d2:	8a e2       	ldi	r24, 0x2A	; 42
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	28 e1       	ldi	r18, 0x18	; 24
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18

	UCSRC=(1<<URSEL)|(3<<UCSZ0);                    //accessing the UCSRC register and selecting 8 bit data format
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	26 e8       	ldi	r18, 0x86	; 134
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
}
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	08 95       	ret

000000f0 <write_uart>:

/*transmit a character through UART*/
void write_uart(unsigned char data)
{
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	0f 92       	push	r0
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA&(1<<UDRE)));
  fc:	00 00       	nop
  fe:	8b e2       	ldi	r24, 0x2B	; 43
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	80 81       	ld	r24, Z
 106:	88 2f       	mov	r24, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	80 72       	andi	r24, 0x20	; 32
 10c:	90 70       	andi	r25, 0x00	; 0
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	b1 f3       	breq	.-20     	; 0xfe <write_uart+0xe>
	UDR=data;
 112:	8c e2       	ldi	r24, 0x2C	; 44
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
	while(!(UCSRA&(1<<TXC)));
 11c:	00 00       	nop
 11e:	8b e2       	ldi	r24, 0x2B	; 43
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	80 81       	ld	r24, Z
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	80 74       	andi	r24, 0x40	; 64
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	b1 f3       	breq	.-20     	; 0x11e <write_uart+0x2e>
}
 132:	0f 90       	pop	r0
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	08 95       	ret

0000013a <read_uart>:

/*receive a character through UART*/
unsigned char read_uart()
{
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	0f 92       	push	r0
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	while(!(UCSRA&(1<<RXC)));
 144:	00 00       	nop
 146:	8b e2       	ldi	r24, 0x2B	; 43
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	d4 f7       	brge	.-12     	; 0x146 <read_uart+0xc>
	data=UDR;
 152:	8c e2       	ldi	r24, 0x2C	; 44
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	89 83       	std	Y+1, r24	; 0x01
	return data;
 15c:	89 81       	ldd	r24, Y+1	; 0x01
}
 15e:	0f 90       	pop	r0
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	08 95       	ret

00000166 <write_uart_strg>:

/*function transmit a string through UART*/
void write_uart_strg(char *ptr)
{
 166:	df 93       	push	r29
 168:	cf 93       	push	r28
 16a:	00 d0       	rcall	.+0      	; 0x16c <write_uart_strg+0x6>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	9a 83       	std	Y+2, r25	; 0x02
 172:	89 83       	std	Y+1, r24	; 0x01
	while(*ptr)
 174:	0b c0       	rjmp	.+22     	; 0x18c <write_uart_strg+0x26>
	{
		write_uart(*ptr);
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	9a 81       	ldd	r25, Y+2	; 0x02
 17a:	fc 01       	movw	r30, r24
 17c:	80 81       	ld	r24, Z
 17e:	0e 94 78 00 	call	0xf0	; 0xf0 <write_uart>
		ptr++;
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	9a 81       	ldd	r25, Y+2	; 0x02
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	9a 83       	std	Y+2, r25	; 0x02
 18a:	89 83       	std	Y+1, r24	; 0x01
}

/*function transmit a string through UART*/
void write_uart_strg(char *ptr)
{
	while(*ptr)
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	9a 81       	ldd	r25, Y+2	; 0x02
 190:	fc 01       	movw	r30, r24
 192:	80 81       	ld	r24, Z
 194:	88 23       	and	r24, r24
 196:	79 f7       	brne	.-34     	; 0x176 <write_uart_strg+0x10>
	{
		write_uart(*ptr);
		ptr++;
	}
}
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	cf 91       	pop	r28
 19e:	df 91       	pop	r29
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
